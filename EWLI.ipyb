{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset = pd.read_csv('Data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>Education_ratio</th>\n",
       "      <th>Hospital_Beds</th>\n",
       "      <th>Total_ATMs</th>\n",
       "      <th>Total_Police</th>\n",
       "      <th>Box_office_collection</th>\n",
       "      <th>Children_out_of_primary_school</th>\n",
       "      <th>GDP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>UK</td>\n",
       "      <td>3.78</td>\n",
       "      <td>1.38</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.22</td>\n",
       "      <td>7.54</td>\n",
       "      <td>0.03</td>\n",
       "      <td>28270000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>US</td>\n",
       "      <td>6.62</td>\n",
       "      <td>1.44</td>\n",
       "      <td>0.14</td>\n",
       "      <td>2.45</td>\n",
       "      <td>17.55</td>\n",
       "      <td>0.02</td>\n",
       "      <td>214280000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Canada</td>\n",
       "      <td>5.60</td>\n",
       "      <td>1.35</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.75</td>\n",
       "      <td>2.08</td>\n",
       "      <td>0.07</td>\n",
       "      <td>17360000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Germany</td>\n",
       "      <td>3.22</td>\n",
       "      <td>4.14</td>\n",
       "      <td>0.06</td>\n",
       "      <td>1.52</td>\n",
       "      <td>1.20</td>\n",
       "      <td>0.02</td>\n",
       "      <td>38460000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>France</td>\n",
       "      <td>4.10</td>\n",
       "      <td>3.14</td>\n",
       "      <td>0.08</td>\n",
       "      <td>1.36</td>\n",
       "      <td>3.08</td>\n",
       "      <td>0.04</td>\n",
       "      <td>27160000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Country  Education_ratio  Hospital_Beds  Total_ATMs  Total_Police  \\\n",
       "0        UK             3.78           1.38        0.10          0.22   \n",
       "1        US             6.62           1.44        0.14          2.45   \n",
       "2    Canada             5.60           1.35        0.17          0.75   \n",
       "3  Germany              3.22           4.14        0.06          1.52   \n",
       "4    France             4.10           3.14        0.08          1.36   \n",
       "\n",
       "   Box_office_collection  Children_out_of_primary_school          GDP  \n",
       "0                   7.54                            0.03   28270000.0  \n",
       "1                  17.55                            0.02  214280000.0  \n",
       "2                   2.08                            0.07   17360000.0  \n",
       "3                   1.20                            0.02   38460000.0  \n",
       "4                   3.08                            0.04   27160000.0  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Education_ratio</th>\n",
       "      <th>Hospital_Beds</th>\n",
       "      <th>Total_ATMs</th>\n",
       "      <th>Total_Police</th>\n",
       "      <th>Box_office_collection</th>\n",
       "      <th>Children_out_of_primary_school</th>\n",
       "      <th>GDP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>11.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>1.100000e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>3.718182</td>\n",
       "      <td>1.320909</td>\n",
       "      <td>0.124545</td>\n",
       "      <td>0.719091</td>\n",
       "      <td>3.136364</td>\n",
       "      <td>0.142727</td>\n",
       "      <td>4.284182e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.387896</td>\n",
       "      <td>1.306625</td>\n",
       "      <td>0.044354</td>\n",
       "      <td>0.753053</td>\n",
       "      <td>5.248650</td>\n",
       "      <td>0.273572</td>\n",
       "      <td>5.792731e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.960000</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.060000</td>\n",
       "      <td>0.140000</td>\n",
       "      <td>0.050000</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>1.434000e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.785000</td>\n",
       "      <td>0.245000</td>\n",
       "      <td>0.095000</td>\n",
       "      <td>0.215000</td>\n",
       "      <td>0.170000</td>\n",
       "      <td>0.025000</td>\n",
       "      <td>1.718000e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.780000</td>\n",
       "      <td>1.340000</td>\n",
       "      <td>0.120000</td>\n",
       "      <td>0.230000</td>\n",
       "      <td>1.200000</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>2.716000e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.410000</td>\n",
       "      <td>0.150000</td>\n",
       "      <td>1.055000</td>\n",
       "      <td>2.580000</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>3.360500e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>6.620000</td>\n",
       "      <td>4.140000</td>\n",
       "      <td>0.210000</td>\n",
       "      <td>2.450000</td>\n",
       "      <td>17.550000</td>\n",
       "      <td>0.950000</td>\n",
       "      <td>2.142800e+08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Education_ratio  Hospital_Beds  Total_ATMs  Total_Police  \\\n",
       "count        11.000000      11.000000   11.000000     11.000000   \n",
       "mean          3.718182       1.320909    0.124545      0.719091   \n",
       "std           1.387896       1.306625    0.044354      0.753053   \n",
       "min           1.960000       0.010000    0.060000      0.140000   \n",
       "25%           2.785000       0.245000    0.095000      0.215000   \n",
       "50%           3.780000       1.340000    0.120000      0.230000   \n",
       "75%           4.000000       1.410000    0.150000      1.055000   \n",
       "max           6.620000       4.140000    0.210000      2.450000   \n",
       "\n",
       "       Box_office_collection  Children_out_of_primary_school           GDP  \n",
       "count              11.000000                       11.000000  1.100000e+01  \n",
       "mean                3.136364                        0.142727  4.284182e+07  \n",
       "std                 5.248650                        0.273572  5.792731e+07  \n",
       "min                 0.050000                        0.010000  1.434000e+07  \n",
       "25%                 0.170000                        0.025000  1.718000e+07  \n",
       "50%                 1.200000                        0.040000  2.716000e+07  \n",
       "75%                 2.580000                        0.100000  3.360500e+07  \n",
       "max                17.550000                        0.950000  2.142800e+08  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = dataset[['Education_ratio', 'Hospital_Beds', 'Total_ATMs',\n",
    "       'Box_office_collection','Children_out_of_primary_school']]\n",
    "y = dataset['GDP']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "regressor = LinearRegression()\n",
    "regressor.fit(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Coefficient</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Education_ratio</th>\n",
       "      <td>1.028302e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hospital_Beds</th>\n",
       "      <td>9.467153e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total_ATMs</th>\n",
       "      <td>2.991516e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Box_office_collection</th>\n",
       "      <td>7.796294e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Children_out_of_primary_school</th>\n",
       "      <td>2.841002e+07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 Coefficient\n",
       "Education_ratio                 1.028302e+07\n",
       "Hospital_Beds                   9.467153e+06\n",
       "Total_ATMs                      2.991516e+08\n",
       "Box_office_collection           7.796294e+06\n",
       "Children_out_of_primary_school  2.841002e+07"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coeff_df = pd.DataFrame(regressor.coef_, X.columns, columns=['Coefficient'])\n",
    "coeff_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = regressor.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Actual</th>\n",
       "      <th>Predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>27160000.0</td>\n",
       "      <td>5.437198e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>17000000.0</td>\n",
       "      <td>1.204474e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>17360000.0</td>\n",
       "      <td>7.282995e+07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Actual     Predicted\n",
       "4  27160000.0  5.437198e+07\n",
       "9  17000000.0  1.204474e+07\n",
       "2  17360000.0  7.282995e+07"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error: 29212396.98541737\n",
      "Mean Squared Error: 1280654032425097.2\n",
      "Root Mean Squared Error: 35786226.85370864\n"
     ]
    }
   ],
   "source": [
    "#Evaluating the Algorithm\n",
    "from sklearn import metrics\n",
    "print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\n",
    "print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\n",
    "print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
